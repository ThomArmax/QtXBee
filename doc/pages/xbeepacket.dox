/**
 * @enum XBeePacket::ApiId
 * @brief The ApiId enum identifies sent/received frame's type
 *
 * @var XBeePacket::TXRequest64Id
 * Identifies a Transmit request with a 64-bits addressing (Wpan::TXRequest64)
 *
 * @var XBeePacket::TXRequest16Id
 * Identifies a Transmit request with a 16-bits addressing (Wpan::TXRequest16)
 *
 * @var XBeePacket::RX16ResponseId
 * Identifies a response (Wpan::TXRequest16) to a Wpan::TXRequest16 (XBeePacket::TXRequest16Id)
 *
 * @var XBeePacket::RX64ResponseId
 * Identifies a response (Wpan::TXRequest64) to a Wpan::TXRequest64 (XBeePacket::TXRequest64Id)
 *
 * @var XBeePacket::TXStatusResponseId
 * Identifies a Wpan::TXStatusResponse. When a TX Request (Wpan::TXRequest64 or Wpan::TXRequest16) is completed, the module sends a TX Status message.
 * This message will indicate if the packet was transmitted successfully or if there was a failure.
 *
 * @var XBeePacket::RX64IOResponseId
 * Identifies a Wpan::RxResponseIoSample64
 *
 * @var XBeePacket::RX16IOResponseId
 * Identifies a Wpan::RxResponseIoSample16
 *
 * @var XBeePacket::ATCommandId
 * Identifies an AT Command Frame (ATCommand)<BR>
 * Used to query or set module parameters on the local device. This API command applies changes after executing the command.
 * (Changes made to module parameters take effect once changes are applied.)
 * The API example below illustrates an API frame when modifying the NJ parameter value of the module
 *
 * @var XBeePacket::ATCommandQueueId
 * Identifies an AT Command - Queue Parameter Value Frame (ATCommandQueueParam)<BR>
 * This API type allows module parameters to be queried or set. In contrast to the XBeePacket::ATCommandId API type,
 * new parameter values are queued and not applied until either the XBeePacket::ATCommandId (0x08) API type or the AC (Apply Changes) command is issued.
 * Register queries (reading parameter values) are returned immediately.
 *
 * @var XBeePacket::ZBTXRequestId
 * Identifies a ZigBee Transmit Request Frame (ZigBee::ZBTxRequest)<BR>
 * A Transmit Request API frame causes the module to send data as an RF packet to the specified destination.
 * The 64-bit destination address should be set to 0x000000000000FFFF for a broadcast transmission (to all devices).
 * The coordinator can be addressed by either setting the 64-bit address to all 0x00s and the 16-bit address to 0xFFFE,
 * OR by setting the 64-bit address to the coordinator's 64-bit address and the 16-bit address to 0x0000.
 * For all other transmissions, setting the 16-bit address to the correct 16-bit address can help improve performance when transmitting to multiple destinations.
 * If a 16-bit address is not known, this field should be set to 0xFFFE (unknown).
 * The Transmit Status frame (0x8B) will indicate the discovered 16-bit address, if successful.
 * The broadcast radius can be set from 0 up to NH. If set to 0, the value of NH specifies the broadcast radius (recommended).
 * This parameter is only used for broadcast transmissions.
 * The maximum number of payload bytes can be read with the NP command.
 *
 * @var XBeePacket::ZBExplicitTxRequestId
 * Identifies an Explicit Addressing Command Frame (ZigBee::ZBExplicitTxRequest)<BR>
 * Allows ZigBee application layer fields (endpoint and cluster ID) to be specified for a data transmission.
 * Similar to the XBeePacket::TXRequestFrame, but also requires ZigBee application layer addressing fields to be specified
 * (endpoints, cluster ID, profile ID). An Explicit Addressing Request API frame causes the module to send data as an RF
 * packet to the specified destination, using the specified source and destination endpoints, cluster ID, and profile ID.
 * The 64-bit destination address should be set to 0x000000000000FFFF for a broadcast transmission (to all devices).
 * The coordinator can be addressed by either setting the 64-bit address to all 0x00s and the 16-bit address to 0xFFFE,
 * OR by setting the 64-bit address to the coordinator's 64-bit address and the 16-bit address to 0x0000.
 * For all other transmissions, setting the 16-bit address to the correct 16-bit address can help improve performance when transmitting to multiple destinations.
 * If a 16-bit address is not known, this field should be set to 0xFFFE (unknown).
 * The Transmit Status frame (0x8B) will indicate the discovered 16-bit address, if successful.
 * The broadcast radius can be set from 0 up to NH. If set to 0, the value of NH specifies the broadcast radius (recommended).
 * This parameter is only used for broadcast transmissions.
 * The maximum number of payload bytes can be read with the NP command.
 * @note if source routing is used, the RF payload will be reduced by two bytes per intermediate hop in the source route.
 *
 * @var XBeePacket::RemoteATCommandRequestId
 * Identifies a Remote Command Request Frame (RemoteATCommandRequest)<BR>
 * Used to query or set module parameters on a remote device. For parameter changes on the remote device to take effect,
 * changes must be applied, either by setting the apply changes options bit, or by sending an AC command to the remote.
 *
 * @var XBeePacket::CreateSourceRouteId
 * Identifies A Create Source Route Frame (CreateSourceRoute)
 * This frame creates a source route in the module.
 * A source route specifies the complete route a packet should traverse to get from source to destination.
 * Source routing should be used with many-to-one routing for best results.
 * @note Both the 64-bit and 16-bit destination addresses are required when creating a source route.
 * These are obtained when a XBeePacket::RouteRecordIndicatorFrame (0xA1) frame is received.
 *
 * @var XBeePacket::ATCommandResponseId
 * Identifies an AT Command Response Frame (ATCommandResponse)<BR>
 * In response to an ATCommand (XBeePacket::ATCommandId) message, the module will send an ATCommandResponse (XBeePacket::ATCommandResponseId).
 * Some commands will send back multiple frames (for example, the ND (Node Discover) command).
 *
 * @var XBeePacket::ModemStatusResponseId
 * Identifies a Modem Status Frame (ModemStatus)<BR>
 * RF module status messages are sent from the module in response to specific conditions.
 *
 * @var XBeePacket::ZBTXStatusResponseId
 * Identifies a ZigBee Transmit Status (ZigBee::ZBTxStatusResponse)<BR>
 * When a XBeePacket::TXRequestFrame is completed, the module sends a TX Status message.
 * This message will indicate if the packet was transmitted successfully or if there was a failure.
 *
 * @var XBeePacket::ZBRXResponseId
 * Identifies a ZigBee Receive Packet Frame when AO=0 (ZigBee::ZBRxResponse)<BR>
 * When the module receives an RF packet, it is sent out the UART using this message type.
 *
 * @var XBeePacket::ZBExplicitRxResponseId
 * Identifies a ZigBee Explicit Rx Indicator when AO=1 (ZigBee::ZBExplicitRxResponse)<BR>
 * When the modem receives a ZigBee RF packet it is sent out the UART using this message type (when AO=1).
 *
 * @var XBeePacket::ZBIOSampleResponseId
 * When the module receives an IO sample frame from a remote device,
 * it sends the sample out the UART using this frame type (when AO=0).
 * Only modules running API firmware will send IO samples out the UART.
 *
 * @var XBeePacket::XBeeSensorReadIndicatorId
 * When the module receives a sensor sample (from a Digi 1-wire sensor adapter), it is sent out the UART using this message type (when AO=0).
 *
 * @var XBeePacket::ZBIONodeIdentificationId
 * Identifies a Node Identification Indicator Frame (ZigBee::ZBIONodeIdentificationResponse)<BR>
 * This frame is received when a module transmits a node identification message to identify itself (when AO=0).
 * The data portion of this frame is similar to a network discovery response frame (see ND command).
 *
 * @var XBeePacket::RemoteATCommandResponseId
 * Identifies a Remote Command Response Frame (RemoteATCommandResponse)<BR>
 * If a module receives a remote command response RF data frame in response to a Remote AT Command Request,
 * the module will send a Remote AT Command Response message out the UART.
 * Some commands may send back multiple frames--for example, Node Discover (ND) command.
 *
 * @var XBeePacket::OverTheAirFirmwareUpdateId
 * The Over-the-Air Firmware Update Status frame provides a status indication of a firmware update transmission attempt.
 * If a query command (0x01 0x51) is sent to a target with a 64-bit address of 0x0013A200 40522BAA through an
 * updater with 64-bit address 0x0013A200403E0750 and 16-bit address 0x0000, the following is the expected response.
 *
 * @var XBeePacket::RouteRecordIndicatorId
 * The route record indicator is received whenever a device sends a ZigBee route record command.
 * This is used with many-to-one routing to create source routes for devices in a network.
 *
 * @var XBeePacket::ManyToOneRouteRequestId
 * The many-to-one route request indicator frame is sent out the UART whenever a many-to-one route request is received.
 **/
